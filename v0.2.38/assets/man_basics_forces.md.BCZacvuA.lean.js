import{_ as l,c as o,j as i,a as e,G as t,a5 as n,B as r,o as p}from"./chunks/framework.DFZNWBnV.js";const j=JSON.parse('{"title":"Driving forces","description":"","frontmatter":{},"headers":[],"relativePath":"man/basics/forces.md","filePath":"man/basics/forces.md","lastUpdated":null}'),d={name:"man/basics/forces.md"},h={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function g(f,s,E,m,b,F){const a=r("Badge");return p(),o("div",null,[s[16]||(s[16]=i("h1",{id:"Driving-forces",tabindex:"-1"},[e("Driving forces "),i("a",{class:"header-anchor",href:"#Driving-forces","aria-label":'Permalink to "Driving forces {#Driving-forces}"'},"​")],-1)),i("details",h,[i("summary",null,[s[0]||(s[0]=i("a",{id:"JutulDarcy.setup_reservoir_forces",href:"#JutulDarcy.setup_reservoir_forces"},[i("span",{class:"jlbinding"},"JutulDarcy.setup_reservoir_forces")],-1)),s[1]||(s[1]=e()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[2]||(s[2]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_reservoir_forces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model; control </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, limits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, set_default_limits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set up driving forces for a reservoir model with wells</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/fe12e10b9744464e09aaf88ecd86de23f1de0f7f/src/utils.jl#L1165-L1169" target="_blank" rel="noreferrer">source</a></p>',3))]),s[17]||(s[17]=i("h2",{id:"Source-terms",tabindex:"-1"},[e("Source terms "),i("a",{class:"header-anchor",href:"#Source-terms","aria-label":'Permalink to "Source terms {#Source-terms}"'},"​")],-1)),i("details",c,[i("summary",null,[s[3]||(s[3]=i("a",{id:"JutulDarcy.SourceTerm",href:"#JutulDarcy.SourceTerm"},[i("span",{class:"jlbinding"},"JutulDarcy.SourceTerm")],-1)),s[4]||(s[4]=e()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[5]||(s[5]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SourceTerm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cell, value; fractional_flow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MassSource)</span></span></code></pre></div><p>Create source term in given <code>cell</code> with given total <code>value</code>.</p><p>The optional <code>fractional_flow</code> argument controls how this term is divided over components if used for inflow and should contain one entry per component in the system: (<code>number_of_components(system)</code>). <code>fractional_flow</code> should sum up to 1.0. The <code>type</code> argument should be an instance of the <code>FlowSourceType</code> enum, with interpretations as follows:</p><ul><li><p><code>MassSource</code>: Source is directly interpreted as component masses.</p></li><li><p><code>StandardVolumeSource</code>: Source is volume at standard/surface conditions. References densities are used to convert into mass sources.</p></li><li><p><code>VolumeSource</code>: Source is volume at in-situ / reservoir conditions.</p></li></ul><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/fe12e10b9744464e09aaf88ecd86de23f1de0f7f/src/forces/sources.jl#L1-L17" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",u,[i("summary",null,[s[6]||(s[6]=i("a",{id:"JutulDarcy.FlowSourceType",href:"#JutulDarcy.FlowSourceType"},[i("span",{class:"jlbinding"},"JutulDarcy.FlowSourceType")],-1)),s[7]||(s[7]=e()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[8]||(s[8]=i("p",null,"MassSource: Source is directly interpreted as component masses. StandardVolumeSource: Source is volume at standard/surface conditions. References densities are used to convert into mass sources. VolumeSource: Source is volume at in-situ / reservoir conditions.",-1)),s[9]||(s[9]=i("p",null,[i("a",{href:"https://github.com/sintefmath/JutulDarcy.jl/blob/fe12e10b9744464e09aaf88ecd86de23f1de0f7f/src/types.jl#L340-L344",target:"_blank",rel:"noreferrer"},"source")],-1))]),s[18]||(s[18]=i("h2",{id:"Boundary-conditions",tabindex:"-1"},[e("Boundary conditions "),i("a",{class:"header-anchor",href:"#Boundary-conditions","aria-label":'Permalink to "Boundary conditions {#Boundary-conditions}"'},"​")],-1)),i("details",k,[i("summary",null,[s[10]||(s[10]=i("a",{id:"JutulDarcy.FlowBoundaryCondition",href:"#JutulDarcy.FlowBoundaryCondition"},[i("span",{class:"jlbinding"},"JutulDarcy.FlowBoundaryCondition")],-1)),s[11]||(s[11]=e()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[12]||(s[12]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FlowBoundaryCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pressure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT_MINIMUM_PRESSURE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 298.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fractional_flow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">density </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trans_flow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trans_thermal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Dirchlet boundary condition for constant values (pressure/temperature) at some inflow boundary</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/fe12e10b9744464e09aaf88ecd86de23f1de0f7f/src/forces/bc.jl#L1-L13" target="_blank" rel="noreferrer">source</a></p>`,3))]),i("details",y,[i("summary",null,[s[13]||(s[13]=i("a",{id:"JutulDarcy.flow_boundary_condition",href:"#JutulDarcy.flow_boundary_condition"},[i("span",{class:"jlbinding"},"JutulDarcy.flow_boundary_condition")],-1)),s[14]||(s[14]=e()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[15]||(s[15]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flow_boundary_condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cells, domain, pressures, temperatures </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 298.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add flow boundary conditions to a vector of <code>cells</code> for a given <code>domain</code> coming from <code>reservoir_domain</code>. The input arguments <code>pressures</code> and <code>temperatures</code> can either be scalars or one value per cell. Other keyword arguments are passed onto the <code>FlowBoundaryCondition</code> constructor.</p><p>The output of this function is a <code>Vector</code> of boundary conditions that can be passed on the form <code>forces = setup_reservoir_forces(model, bc = bc)</code>.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/fe12e10b9744464e09aaf88ecd86de23f1de0f7f/src/forces/bc.jl#L84-L94" target="_blank" rel="noreferrer">source</a></p>',4))])])}const D=l(d,[["render",g]]);export{j as __pageData,D as default};
