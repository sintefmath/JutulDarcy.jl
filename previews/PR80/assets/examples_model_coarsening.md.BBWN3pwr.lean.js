import{_ as a,c as e,a5 as i,o as n}from"./chunks/framework.DV8_rcIL.js";const l="/JutulDarcy.jl/previews/PR80/assets/hxxqknz.BWC7xQ-9.jpeg",t="/JutulDarcy.jl/previews/PR80/assets/mcoclcw.CigeuZLi.jpeg",u=JSON.parse('{"title":"Model coarsening","description":"","frontmatter":{},"headers":[],"relativePath":"examples/model_coarsening.md","filePath":"examples/model_coarsening.md","lastUpdated":null}'),p={name:"examples/model_coarsening.md"};function r(h,s,o,c,d,k){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="Model-coarsening" tabindex="-1">Model coarsening <a class="header-anchor" href="#Model-coarsening" aria-label="Permalink to &quot;Model coarsening {#Model-coarsening}&quot;">​</a></h1><p>Running a model at full resolution can be computationally expensive. In many cases, it is possible to coarsen the model to reduce the computational cost. This example demonstrates how to coarsen a model using JutulDarcy.jl. The example uses the Egg model, which is a small oil-water model with heterogeneous permeability. The model is coarsened using different methods and partition sizes, and the results are compared to the fine-scale model. The example demonstrates how to coarsen a model and simulate it using JutulDarcy.jl. The example also demonstrates how to compare the results of the coarse-scale model to the fine-scale model.</p><p>The example is intended to show the workflow of coarsening a model, and represents a starting point for more advanced techniques like upscaling, coarse-model calibration and history matching. The model is therefore intentionally simple and very coarse for quick simulations, and not necessarily accurate model responses.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Jutul, JutulDarcy, HYPRE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoEnergyIO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoEnergyIO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test_input_file_path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EGG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_pth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_dir, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EGG.DATA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fine_case </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_case_from_data_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_pth);</span></span></code></pre></div><h2 id="Simulate-the-base-case" tabindex="-1">Simulate the base case <a class="header-anchor" href="#Simulate-the-base-case" aria-label="Permalink to &quot;Simulate the base case {#Simulate-the-base-case}&quot;">​</a></h2><p>We simulate the fine case to get a reference solution to compare against. We also extract the mesh and reservoir for plotting.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fine_model = fine_case.model</span></span>
<span class="line"><span>fine_reservoir = reservoir_domain(fine_model)</span></span>
<span class="line"><span>fine_mesh = physical_representation(fine_reservoir)</span></span>
<span class="line"><span>ws, states = simulate_reservoir(fine_case, info_level = -1);</span></span>
<span class="line"><span>nothing #hide</span></span></code></pre></div><h2 id="Coarsen-the-model-and-plot-partition" tabindex="-1">Coarsen the model and plot partition <a class="header-anchor" href="#Coarsen-the-model-and-plot-partition" aria-label="Permalink to &quot;Coarsen the model and plot partition {#Coarsen-the-model-and-plot-partition}&quot;">​</a></h2><p>We coarsen the model using a partition size of 20x20x2 and the IJK method where the underlying structure of the mesh is used to subdivide the blocks. This function automatically handles inactive cells and disconnected blocks and can therefore also work on more complex models.</p><p>We pass a triplet of integers to specify the partition size. This will give an essentially structured partition. Later on, we we will look at graph partitioners.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coarse_case </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coarsen_reservoir_case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fine_case, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :ijk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coarse_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coarse_case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coarse_reservoir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reservoir_domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coarse_case)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coarse_mesh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> physical_representation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coarse_reservoir)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coarse_mesh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">partition</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plot_cell_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fine_mesh, p, colormap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :lipariS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+l+`" alt=""></p><h3 id="Compare-fine-scale-and-coarse-scale-permeability" tabindex="-1">Compare fine-scale and coarse-scale permeability <a class="header-anchor" href="#Compare-fine-scale-and-coarse-scale-permeability" aria-label="Permalink to &quot;Compare fine-scale and coarse-scale permeability {#Compare-fine-scale-and-coarse-scale-permeability}&quot;">​</a></h3><p>The fine-scale and coarse-scale permeability fields are compared visually. The coarsening uses a static upscaling, where the permeability is harmonically averaged per direction when coarsening. This is a simple method that can be effective enough for many cases.</p><p>The fine-scale permeability is shown on the left, and the coarse-scale is shown on the right, with the same color axis.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K_f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fine_reservoir[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:permeability</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, :]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K_c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coarse_reservoir[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:permeability</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, :]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kcaxis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> extrema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(K_f)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Fine scale permeability&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zreversed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_cell_data!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axf, fine_mesh, K_f, colorrange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kcaxis, colormap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :turbo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Coarse scale permeability&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zreversed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plot_cell_data!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axc, coarse_mesh, K_c, colorrange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kcaxis, colormap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :turbo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Colorbar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], plt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+t+`" alt=""></p><h3 id="Simulate-the-coarse-scale-model" tabindex="-1">Simulate the coarse-scale model <a class="header-anchor" href="#Simulate-the-coarse-scale-model" aria-label="Permalink to &quot;Simulate the coarse-scale model {#Simulate-the-coarse-scale-model}&quot;">​</a></h3><p>The coarse scale model can be simulated just as the fine-scale model was, but the runtime should be significantly reduced down to around a second.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@time ws_c, states_c = simulate_reservoir(coarse_case, info_level = -1);</span></span>
<span class="line"><span>nothing #hide</span></span></code></pre></div><h3 id="Plot-and-compare-the-coarse-scale-and-fine-scale-solutions" tabindex="-1">Plot and compare the coarse-scale and fine-scale solutions <a class="header-anchor" href="#Plot-and-compare-the-coarse-scale-and-fine-scale-solutions" aria-label="Permalink to &quot;Plot and compare the coarse-scale and fine-scale solutions {#Plot-and-compare-the-coarse-scale-and-fine-scale-solutions}&quot;">​</a></h3><p>We plot the pressure field for the fine-scale and coarse-scale models. The model has little pressure variation, but we see that there are substantial differences between our very coarse model and the original fine-scale.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using Statistics</span></span>
<span class="line"><span>wells = JutulDarcy.get_model_wells(fine_model)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p_c = states_c[end][:Pressure]</span></span>
<span class="line"><span>p_f = states[end][:Pressure]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>caxis = extrema([extrema(p_c)..., extrema(p_f)...])</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fig = Figure(size = (1200, 500))</span></span>
<span class="line"><span>axf = Axis3(fig[1, 1], title = &quot;Fine scale&quot;, zreversed = true)</span></span>
<span class="line"><span>plot_cell_data!(axf, fine_mesh, p_f, colorrange = caxis, colormap = :turbo)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for (k, w) in wells</span></span>
<span class="line"><span>    plot_well!(axf, fine_mesh, w, fontsize = 0)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>axc = Axis3(fig[1, 2], title = &quot;Coarse scale&quot;, zreversed = true)</span></span>
<span class="line"><span>plt = plot_cell_data!(axc, coarse_mesh, p_c, colorrange = caxis, colormap = :turbo)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for (k, w) in wells</span></span>
<span class="line"><span>    plot_well!(axc, fine_mesh, w, fontsize = 0)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>Colorbar(fig[1, 3], plt)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><h3 id="Plot-and-compare-the-saturation-fields" tabindex="-1">Plot and compare the saturation fields <a class="header-anchor" href="#Plot-and-compare-the-saturation-fields" aria-label="Permalink to &quot;Plot and compare the saturation fields {#Plot-and-compare-the-saturation-fields}&quot;">​</a></h3><p>We observe that the saturation fields are quite different between the coarse-scale and fine scale, with the coarse-scale model showing a more uniform saturation field as the leading shock is smeared away.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>s_c = states_c[end][:Saturations][1, :]</span></span>
<span class="line"><span>s_f = states[end][:Saturations][1, :]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>scaxis = extrema([extrema(s_c)..., extrema(s_f)...])</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fig = Figure(size = (1200, 500))</span></span>
<span class="line"><span>axf = Axis3(fig[1, 1], title = &quot;Fine scale&quot;, zreversed = true)</span></span>
<span class="line"><span>plot_cell_data!(axf, fine_mesh, s_f, colorrange = scaxis, colormap = :turbo)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for (k, w) in wells</span></span>
<span class="line"><span>    plot_well!(axf, fine_mesh, w, fontsize = 0)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>axc = Axis3(fig[1, 2], title = &quot;Coarse scale&quot;, zreversed = true)</span></span>
<span class="line"><span>plt = plot_cell_data!(axc, coarse_mesh, s_c, colorrange = scaxis, colormap = :turbo)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for (k, w) in wells</span></span>
<span class="line"><span>    plot_well!(axc, fine_mesh, w, fontsize = 0)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>Colorbar(fig[1, 3], plt)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><h3 id="Plot-the-average-field-scale-pressure-evolution" tabindex="-1">Plot the average field scale pressure evolution <a class="header-anchor" href="#Plot-the-average-field-scale-pressure-evolution" aria-label="Permalink to &quot;Plot the average field scale pressure evolution {#Plot-the-average-field-scale-pressure-evolution}&quot;">​</a></h3><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fig = Figure()</span></span>
<span class="line"><span>axf_p = Axis(fig[1, 1], ylabel = &quot;Avg. pressure / bar&quot;)</span></span>
<span class="line"><span>lines!(axf_p, map(x -&gt; mean(x[:Pressure])/1e5, states), label = &quot;Fine&quot;)</span></span>
<span class="line"><span>lines!(axf_p, map(x -&gt; mean(x[:Pressure])/1e5, states_c), label = &quot;Coarse&quot;)</span></span>
<span class="line"><span>axislegend()</span></span>
<span class="line"><span>fig</span></span></code></pre></div><h3 id="Plot-the-wells-interactively" tabindex="-1">Plot the wells interactively <a class="header-anchor" href="#Plot-the-wells-interactively" aria-label="Permalink to &quot;Plot the wells interactively {#Plot-the-wells-interactively}&quot;">​</a></h3><p>We can plot the well results in the interactive viewer using the comparison feature that allows multiple results to be superimposed in the same figure.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plot_well_results([ws, ws_c], names = [&quot;Fine&quot;, &quot;Coarse&quot;], field = :orat, accumulated = true)</span></span></code></pre></div><h3 id="Plot-field-scale-measurables-over-time-interactively" tabindex="-1">Plot field scale measurables over time interactively <a class="header-anchor" href="#Plot-field-scale-measurables-over-time-interactively" aria-label="Permalink to &quot;Plot field scale measurables over time interactively {#Plot-field-scale-measurables-over-time-interactively}&quot;">​</a></h3><p>The field-scale quantities match fairly well between the coarse-scale and fine-scale models. There is always a trade-off between accuracy and quality in numerical simulations, where the goal is to find the right balance between accuracy in quantities of interest and computational cost.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fine_m = reservoir_measurables(fine_case, ws, states)</span></span>
<span class="line"><span>coarse_m = reservoir_measurables(coarse_case, ws_c, states_c)</span></span>
<span class="line"><span>m = copy(fine_m)</span></span>
<span class="line"><span>for (k, v) in pairs(coarse_m)</span></span>
<span class="line"><span>    if k != :time</span></span>
<span class="line"><span>        m[Symbol(&quot;coarse_$k&quot;)] = v</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_reservoir_measurables(m, left = :fopr, right = :coarse_fopr, accumulated = true)</span></span></code></pre></div><h2 id="Compare-different-partitioning-methods" tabindex="-1">Compare different partitioning methods <a class="header-anchor" href="#Compare-different-partitioning-methods" aria-label="Permalink to &quot;Compare different partitioning methods {#Compare-different-partitioning-methods}&quot;">​</a></h2><p>We have only so far tested a single partitioning method. We can quickly generate a few other coarse models using different partitioning methods and coarsening values. We highlight that we can also use the centroids instead of the IJK indices to partition, for when the mesh may not have a structured background mesh. In addition, we can call different graph partitioners by passing the desired number of blocks. Here, we call a simple METIS-based transmissibility coarsening, but the code contains options to use other weights and partitioners.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>partition_variants = [</span></span>
<span class="line"><span>    (:centroids, (3, 3, 2)),</span></span>
<span class="line"><span>    (:ijk, (5, 5, 1)),</span></span>
<span class="line"><span>    (:metis, 10),</span></span>
<span class="line"><span>    (:metis, 50)</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fig = Figure(size = (1200, 600))</span></span>
<span class="line"><span>layout = GridLayout()</span></span>
<span class="line"><span>fig[1, 1] = layout</span></span>
<span class="line"><span>rowwidth = Int(floor(length(partition_variants)/2))</span></span>
<span class="line"><span>for (no, variant) in enumerate(partition_variants)</span></span>
<span class="line"><span>    if no &gt; rowwidth</span></span>
<span class="line"><span>        row = 2</span></span>
<span class="line"><span>        pix = no - rowwidth</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>        row = 1</span></span>
<span class="line"><span>        pix = no</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>    cmethod, cdim = variant</span></span>
<span class="line"><span>    variant_case = coarsen_reservoir_case(fine_case, cdim, method = cmethod)</span></span>
<span class="line"><span>    r = reservoir_domain(variant_case)</span></span>
<span class="line"><span>    m = physical_representation(r)</span></span>
<span class="line"><span>    p = m.partition</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ax = Axis3(fig, title = &quot;$cmethod - $cdim&quot;, azimuth = 0.3, elevation = 1.0, zreversed = true)</span></span>
<span class="line"><span>    plot_cell_data!(ax, fine_mesh, p, colormap = :lipariS)</span></span>
<span class="line"><span>    layout[row, 2*(pix-1) + 1] = ax</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    _, variant_states = simulate_reservoir(variant_case, info_level = -1)</span></span>
<span class="line"><span>    pres = variant_states[end][:Pressure]</span></span>
<span class="line"><span>    axp = Axis3(fig, title = &quot;Pressure&quot;, azimuth = 0.3, elevation = 1.0, zreversed = true)</span></span>
<span class="line"><span>    for (k, w) in wells</span></span>
<span class="line"><span>        plot_well!(axp, fine_mesh, w, fontsize = 0)</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>    plot_cell_data!(axp, m, pres, colorrange = caxis, colormap = :turbo)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    layout[row, 2*(pix-1) + 2] = axp</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>fig</span></span></code></pre></div><h2 id="Example-on-GitHub" tabindex="-1">Example on GitHub <a class="header-anchor" href="#Example-on-GitHub" aria-label="Permalink to &quot;Example on GitHub {#Example-on-GitHub}&quot;">​</a></h2><p>If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository <a href="https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/model_coarsening.jl" target="_blank" rel="noreferrer">as a script</a>, or as a <a href="https://github.com/sintefmath/JutulDarcy.jl/blob/gh-pages/dev/final_site/notebooks/model_coarsening.ipynb" target="_blank" rel="noreferrer">Jupyter Notebook</a></p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,41)]))}const m=a(p,[["render",r]]);export{u as __pageData,m as default};
