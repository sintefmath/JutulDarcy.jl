import{_ as a,c as t,a5 as i,o as r}from"./chunks/framework.B8T_V2-a.js";const c=JSON.parse('{"title":"Standalone reservoir simulator","description":"","frontmatter":{},"headers":[],"relativePath":"man/advanced/compiled.md","filePath":"man/advanced/compiled.md","lastUpdated":null}'),o={name:"man/advanced/compiled.md"};function l(n,e,s,p,u,m){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="Standalone-reservoir-simulator" tabindex="-1">Standalone reservoir simulator <a class="header-anchor" href="#Standalone-reservoir-simulator" aria-label="Permalink to &quot;Standalone reservoir simulator {#Standalone-reservoir-simulator}&quot;">â€‹</a></h1><p>Scripts are interactive and useful for doing setup, simulation and post-processing in one file, but sometimes you want to run a big model unmodified from an input file:</p><ul><li><p>As an alternative to a pure Julia workflow, <code>JutulDarcy.jl</code> can be compiled into a standalone reservoir simulator</p></li><li><p>This makes MPI simulations more ergonomic</p></li><li><p>Compiling the code saves time when running multiple simulations</p></li><li><p>The resulting executable is a standard command-line program - no Julia experience needed</p></li><li><p>Output is given in the same format as regular simulations, can load data by restarting a simulation from the same <code>output_path</code></p></li></ul><p>This workflow uses <a href="https://github.com/JuliaLang/PackageCompiler.jl" target="_blank" rel="noreferrer">PackageCompiler.jl</a>. For more details and an example build file with keyword arguments, see <a href="https://github.com/sintefmath/JutulDarcyApps.jl/tree/master/mpi_simulator" target="_blank" rel="noreferrer">the JutulDarcyApps.jl repository</a>.</p><p>A few things to note:</p><ul><li><p>The simulator comes with a set of shared library files and will be ~500 mb</p></li><li><p>Binaries will match platform (compiling under Linux gives you Linux binaries)</p></li><li><p>The repository has a script that runs small &quot;representative&quot; models</p></li><li><p>You can input small representative models in <code>precompile_jutul_darcy_mpi.jl</code> to make sure that compilation is avoided during simulation</p></li><li><p>By default, the script uses the default Julia MPI binary. On a cluster, the build script may have to be modified to use the MPI type of the cluster using <a href="https://github.com/eschnett/MPItrampoline" target="_blank" rel="noreferrer">MPITrampoline.jl</a></p></li></ul><p>If you get it working on a complex MPI setup, feedback on your experience and PRs are very welcome.</p>',7)]))}const h=a(o,[["render",l]]);export{c as __pageData,h as default};
