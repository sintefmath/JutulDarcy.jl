import{_ as r,c as n,a5 as i,j as e,a as t,G as l,B as p,o}from"./chunks/framework.CGrcyYnv.js";const N=JSON.parse('{"title":"High-level API","description":"","frontmatter":{},"headers":[],"relativePath":"man/highlevel.md","filePath":"man/highlevel.md","lastUpdated":null}'),d={name:"man/highlevel.md"},h={class:"jldocstring custom-block",open:""},u={tabindex:"0"},c={style:{"text-align":"right"}},m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.974ex",height:"1.912ex",role:"img",focusable:"false",viewBox:"0 -833.9 1314.6 844.9","aria-hidden":"true"},g={style:{"text-align":"right"}},Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.351ex",height:"2.451ex",role:"img",focusable:"false",viewBox:"0 -833.2 3249.1 1083.2","aria-hidden":"true"},y={style:{"text-align":"right"}},f={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.593ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3798 1000","aria-hidden":"true"},v={style:{"text-align":"right"}},E={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},w={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.5ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3315 1000","aria-hidden":"true"},x={style:{"text-align":"right"}},F={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.5ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3315 1000","aria-hidden":"true"},D={style:{"text-align":"right"}},j={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},_={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.593ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3798 1000","aria-hidden":"true"},L={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""};function I(q,s,Z,z,O,V){const a=p("Badge");return o(),n("div",null,[s[63]||(s[63]=i('<h1 id="High-level-API" tabindex="-1">High-level API <a class="header-anchor" href="#High-level-API" aria-label="Permalink to &quot;High-level API {#High-level-API}&quot;">​</a></h1><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p>The basic outline of building a reservoir simulation problem consists of:</p><ol><li><p>Making a mesh</p></li><li><p>Converting the mesh into a reservoir, adding properties</p></li><li><p>Add any number of wells</p></li><li><p>Setup a physical system and setup a reservoir model</p></li><li><p>Set up timesteps, well controls and other forces</p></li><li><p>Simulate!</p></li></ol><h3 id="meshes" tabindex="-1">Meshes <a class="header-anchor" href="#meshes" aria-label="Permalink to &quot;Meshes&quot;">​</a></h3><p>JutulDarcy can use meshes that supported by Jutul. This includes the Cartesian (<a href="/JutulDarcy.jl/previews/PR85/ref/jutul#Jutul.CartesianMesh"><code>Jutul.CartesianMesh</code></a>) and Unstructured meshes (<a href="/JutulDarcy.jl/previews/PR85/ref/jutul#Jutul.CartesianMesh"><code>Jutul.CartesianMesh</code></a>) as well as any meshes in the more general <a href="https://github.com/JuliaGeometry/Meshes.jl" target="_blank" rel="noreferrer">Meshes.jl</a> package.</p><h3 id="reservoir" tabindex="-1">Reservoir <a class="header-anchor" href="#reservoir" aria-label="Permalink to &quot;Reservoir&quot;">​</a></h3><p>Once a mesh has been set up, we can turn it into a reservoir with static properties:</p>',8)),e("details",h,[e("summary",null,[s[0]||(s[0]=e("a",{id:"JutulDarcy.reservoir_domain",href:"#JutulDarcy.reservoir_domain"},[e("span",{class:"jlbinding"},"JutulDarcy.reservoir_domain")],-1)),s[1]||(s[1]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[34]||(s[34]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reservoir_domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g; permeability </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> convert_to_si</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:darcy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), porosity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set up a <code>DataDomain</code> instance for given mesh or other representation <code>g</code>. <code>permeability</code> and <code>porosity</code> are then added to the domain. If scalars are passed, they are expanded to cover all cells. Arrays are asserted to match all cells. Permeability is either one value per cell (diagonal scalar), one value per dimension given in each row (for a diagonal tensor) or a vector that represents a compact full tensor representation (6 elements in 3D, 3 in 2D).</p><p><strong>Default data and their values</strong></p>',3)),e("table",u,[s[33]||(s[33]=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"right"}},"Name"),e("th",{style:{"text-align":"right"}},"Explanation"),e("th",{style:{"text-align":"right"}},"Unit"),e("th",{style:{"text-align":"right"}},"Default")])],-1)),e("tbody",null,[e("tr",null,[s[4]||(s[4]=e("td",{style:{"text-align":"right"}},[e("code",null,"permeability")],-1)),s[5]||(s[5]=e("td",{style:{"text-align":"right"}},"Rock ability to conduct fluid flow",-1)),e("td",c,[e("mjx-container",m,[(o(),n("svg",k,s[2]||(s[2]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(911,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),s[3]||(s[3]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("msup",null,[e("mi",null,"m"),e("mn",null,"2")])])],-1))])]),s[6]||(s[6]=e("td",{style:{"text-align":"right"}},"100 mD",-1))]),s[32]||(s[32]=e("tr",null,[e("td",{style:{"text-align":"right"}},[e("code",null,"porosity")]),e("td",{style:{"text-align":"right"}},"Rock void fraction open to flow (0 to 1)"),e("td",{style:{"text-align":"right"}},"-"),e("td",{style:{"text-align":"right"}},"0.3")],-1)),e("tr",null,[s[9]||(s[9]=e("td",{style:{"text-align":"right"}},[e("code",null,"rock_density")],-1)),s[10]||(s[10]=e("td",{style:{"text-align":"right"}},"Mass density of rock",-1)),e("td",g,[e("mjx-container",Q,[(o(),n("svg",T,s[7]||(s[7]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(521,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(510,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1434.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="msup" transform="translate(1934.6,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(911,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),s[8]||(s[8]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"k"),e("msup",null,[e("mi",null,"g"),e("mn",null,"3")]),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")]),e("msup",null,[e("mi",null,"m"),e("mn",null,"3")])])],-1))])]),s[11]||(s[11]=e("td",{style:{"text-align":"right"}},"2000.0",-1))]),e("tr",null,[s[14]||(s[14]=e("td",{style:{"text-align":"right"}},[e("code",null,"rock_heat_capacity")],-1)),s[15]||(s[15]=e("td",{style:{"text-align":"right"}},"Specific heat capacity of rock",-1)),e("td",y,[e("mjx-container",f,[(o(),n("svg",b,s[12]||(s[12]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(633,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1133,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1522,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2043,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2520,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3409,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[13]||(s[13]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"J"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")]),e("mo",{stretchy:"false"},"("),e("mi",null,"k"),e("mi",null,"g"),e("mi",null,"K"),e("mo",{stretchy:"false"},")")])],-1))])]),s[16]||(s[16]=e("td",{style:{"text-align":"right"}},"900.0",-1))]),e("tr",null,[s[19]||(s[19]=e("td",{style:{"text-align":"right"}},[e("code",null,"rock_thermal_conductivity")],-1)),s[20]||(s[20]=e("td",{style:{"text-align":"right"}},"Heat conductivity of rock",-1)),e("td",v,[e("mjx-container",E,[(o(),n("svg",w,s[17]||(s[17]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1048,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(1548,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2426,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[18]||(s[18]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"W"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")]),e("mi",null,"m"),e("mi",null,"K")])],-1))])]),s[21]||(s[21]=e("td",{style:{"text-align":"right"}},"3.0",-1))]),e("tr",null,[s[24]||(s[24]=e("td",{style:{"text-align":"right"}},[e("code",null,"fluid_thermal_conductivity")],-1)),s[25]||(s[25]=e("td",{style:{"text-align":"right"}},"Heat conductivity of fluid phases",-1)),e("td",x,[e("mjx-container",F,[(o(),n("svg",C,s[22]||(s[22]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1048,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(1548,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2426,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[23]||(s[23]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"W"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")]),e("mi",null,"m"),e("mi",null,"K")])],-1))])]),s[26]||(s[26]=e("td",{style:{"text-align":"right"}},"0.6",-1))]),e("tr",null,[s[29]||(s[29]=e("td",{style:{"text-align":"right"}},[e("code",null,"component_heat_capacity")],-1)),s[30]||(s[30]=e("td",{style:{"text-align":"right"}},"Specific heat capacity of fluid components",-1)),e("td",D,[e("mjx-container",j,[(o(),n("svg",_,s[27]||(s[27]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(633,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1133,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1522,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2043,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2520,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3409,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),s[28]||(s[28]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"J"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mo",null,"/")]),e("mo",{stretchy:"false"},"("),e("mi",null,"k"),e("mi",null,"g"),e("mi",null,"K"),e("mo",{stretchy:"false"},")")])],-1))])]),s[31]||(s[31]=e("td",{style:{"text-align":"right"}},"4184.0",-1))])])]),s[35]||(s[35]=i('<p>Note that the default values are taken to be roughly those of water for fluid phases and sandstone for those of rock. Choice of values can severely impact your simulation results - take care to check the values that your physical system makes use of!</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L48-L74" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reservoir_domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{SimulationModel, MultiModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get reservoir domain embedded in model.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L123-L127" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reservoir_domain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JutulCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get reservoir domain from a reservoir simulation case.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L133-L137" target="_blank" rel="noreferrer">source</a></p>',8))]),e("details",L,[e("summary",null,[s[36]||(s[36]=e("a",{id:"JutulDarcy.get_1d_reservoir",href:"#JutulDarcy.get_1d_reservoir"},[e("span",{class:"jlbinding"},"JutulDarcy.get_1d_reservoir")],-1)),s[37]||(s[37]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[38]||(s[38]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_1d_reservoir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    L </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    perm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9.8692e-14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0.1 darcy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    poro </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    area </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Utility function for setting up a 1D reservoir domain with <code>nc</code> cells and length <code>L</code>. The <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.reservoir_domain"><code>reservoir_domain</code></a> function is generally preferred and this function is kept for backwards compatibility.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/porousmedia_grids.jl#L32-L44" target="_blank" rel="noreferrer">source</a></p>`,3))]),s[64]||(s[64]=e("h3",{id:"wells",tabindex:"-1"},[t("Wells "),e("a",{class:"header-anchor",href:"#wells","aria-label":'Permalink to "Wells"'},"​")],-1)),s[65]||(s[65]=e("p",null,"Wells are most easily created using utilities that act directly on a reservoir domain:",-1)),e("details",A,[e("summary",null,[s[39]||(s[39]=e("a",{id:"JutulDarcy.setup_well",href:"#JutulDarcy.setup_well"},[e("span",{class:"jlbinding"},"JutulDarcy.setup_well")],-1)),s[40]||(s[40]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[41]||(s[41]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reservoir_cells; skin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Kh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :Well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :MyWell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Cell 1 in the grid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :MyWell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Position (2, 5, 1) in logically structured mesh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :MyOtherWell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set up a well in <code>reservoir_cells</code> with given skin factor and radius. The order of cells matter as it is treated as a trajectory.</p><p>The <code>name</code> keyword argument can be left defaulted if your model will only have a single well (named <code>:Well</code>). It is highly recommended to provide this whenever a well is set up.</p><p><code>reservoir_cells</code> can be one of the following: A Vector of cells, a single cell, a Vector of <code>(I, J, K)</code> Tuples or a single Tuple of the same type.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/facility/wells/wells.jl#L65-L81" target="_blank" rel="noreferrer">source</a></p>`,5))]),e("details",M,[e("summary",null,[s[42]||(s[42]=e("a",{id:"JutulDarcy.setup_vertical_well",href:"#JutulDarcy.setup_vertical_well"},[e("span",{class:"jlbinding"},"JutulDarcy.setup_vertical_well")],-1)),s[43]||(s[43]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[44]||(s[44]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_vertical_well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i, j; name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :MyWell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set up a vertical well with a <a href="/JutulDarcy.jl/previews/PR85/ref/jutul#Jutul.DataDomain-Tuple{JutulDomain}"><code>DataDomain</code></a> input that represents the porous medium / reservoir where the wells it to be placed. See <a href="/JutulDarcy.jl/previews/PR85/man/basics/wells#JutulDarcy.SimpleWell"><code>SimpleWell</code></a>, <a href="/JutulDarcy.jl/previews/PR85/man/basics/wells#JutulDarcy.MultiSegmentWell"><code>MultiSegmentWell</code></a> and <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_well"><code>setup_well</code></a> for more details about possible keyword arguments.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/facility/wells/wells.jl#L223-L230" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_vertical_well</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g, K, i, j; heel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, toe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> grid_dims_ijk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set up a vertical well for given grid <code>g</code> and permeability <code>K</code> at logical indices <code>i, j</code> perforating all cells starting at k-logical index <code>heel</code> to <code>toe</code>.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/facility/wells/wells.jl#L237-L243" target="_blank" rel="noreferrer">source</a></p>',6))]),s[66]||(s[66]=e("h3",{id:"model",tabindex:"-1"},[t("Model "),e("a",{class:"header-anchor",href:"#model","aria-label":'Permalink to "Model"'},"​")],-1)),s[67]||(s[67]=e("p",null,"A single, option-heavy function is used to set up the reservoir model and default parameters:",-1)),e("details",J,[e("summary",null,[s[45]||(s[45]=e("a",{id:"JutulDarcy.setup_reservoir_model",href:"#JutulDarcy.setup_reservoir_model"},[e("span",{class:"jlbinding"},"JutulDarcy.setup_reservoir_model")],-1)),s[46]||(s[46]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[47]||(s[47]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model, parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_reservoir_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reservoir, system; wells </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model, parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_reservoir_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reservoir, system; wells </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [w1, w2], backend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :csr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set up a reservoir <code>MultiModel</code> for a given reservoir <code>DataDomain</code> typically set up from <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.reservoir_domain"><code>reservoir_domain</code></a> and an optional vector of wells that are created using <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_vertical_well"><code>setup_vertical_well</code></a> and <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_well"><code>setup_well</code></a>.</p><p>The routine automatically sets up a facility and couples the wells with the reservoir and that facility.</p><p><strong>Keyword arguments</strong></p><p><strong>Basic model setup</strong></p><ul><li><p><code>wells=[]</code>: Vector of wells (e.g. from <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_well"><code>setup_well</code></a>) that are to be used in the model. Each well must have a unique name.</p></li><li><p><code>extra_out=true</code>: Return both the model and the parameters instead of just the model.</p></li><li><p><code>thermal = false</code>: Add additional equations for conservation of energy and temperature as a primary variable.</p></li><li><p><code>kgrad=nothing</code>: Type of spatial discretization to use:</p><ul><li><p><code>:tpfa</code> or <code>nothing</code> gives standard two-point flux approximation (TPFA) with hard-coded two-point assembly</p></li><li><p><code>:tpfa_test</code> gives TPFA with specialized finite-volume assembly. Should be similar in performance to <code>:tpfa</code>, but does not make use of threads.</p></li><li><p><code>:avgmpfa</code> gives a consistent linear MPFA scheme that is more accurate for meshes with anisotropic perm or non-orthogonal cells than <code>:tpfa</code>.</p></li><li><p><code>:ntpfa</code> gives a consistent nonlinear MPFA scheme (nonlinear version of <code>:avgmpfa</code> that preserves monotonicity)</p></li></ul></li><li><p><code>upwind=nothing</code>: Type of upwinding to use. Can be <code>:spu</code> or <code>nothing</code> for standard upwinding or <code>:weno</code> for a second-order weighted essentially non-oscillatory scheme.</p></li><li><p><code>extra_outputs=Symbol[]</code>: Extra output variables for reservoir model. Defaults to &quot;typical&quot; values seen in reservoir simulation. Valid values: Vector of symbols to be output, <code>true</code> for all variables and <code>false</code> for the minimal set required to restart simulations (typically only the primary variables and mass of each component)</p></li></ul><p><strong>Advanced model setup</strong></p><p>Advanced options govern internals of the simulator, like type of automatic differentation, how equations are linearized and so on. These should not impact simulation results beyond what is allowed for the model tolerances, but can impact simulation speed.</p><ul><li><p><code>split_wells=false</code>: Add a facility model for each well instead of one facility model that controls all wells. This must be set to <code>true</code> if you want to use MPI or nonlinear domain decomposition.</p></li><li><p><code>backend=:csr</code>: Backend to use. Can be <code>:csc</code> for serial compressed sparse column CSC matrix, <code>:csr</code> for parallel compressed sparse row matrix. <code>:csr</code> is a bit faster and is recommended when using MPI, HYPRE or multiple threads. <code>:csc</code> uses the default Julia format and is interoperable with other Julia libraries.</p></li><li><p><code>context=DefaultContext()</code>: Context used for entire model. Not recommended to set up manually, use <code>backend</code> instead.</p></li><li><p><code>assemble_wells_together=true</code>: Assemble wells in a single big matrix rather than many small matrices.</p></li><li><p><code>block_backend=true</code>: Use block sparse representation. This is needed by the iterative solvers and corresponding preconditioners. Setting this to <code>false</code> will result in a direct solver being used. In addition, equations will be assembled in an order similar to that of MRST (equation major instead of cell major).</p></li><li><p><code>general_ad=false</code>: Use more general form of AD. Will result in slower execution speed than if set to true, but can be useful when working with custom discretizations.</p></li><li><p><code>discretization_arg=NamedTuple()</code>: Additional keyword arguments passed onto <code>discretized_domain_tpfv_flow</code> when setting up discretizations.</p></li></ul><p><strong>Increment and variable options</strong></p><p>These options govern the range of values and the maximum allowable change of properties over a single Newton iteration. Changing values for maximum change will not change the equations themselves, but the values will change the rate of nonlinear solver convergence. Typically, smaller values are more conservative and reduce numerical difficulties, but can significantly increase the number of iterations and the reduce the length of the average time-step. Setting very small values can make it infeasible to solve the problems in a reasonable time.</p><p>Note that relative values are usually given relative to the cell value. If your expected output values are close to zero (e.g. for near-atmospheric pressure) low values can lead to slow convergence.</p><ul><li><p><code>dp_max_abs=nothing</code>: Maximum allowable pressure change in SI units (Pa)</p></li><li><p><code>dp_max_rel=0.2</code>: Maximum allowable relative pressure change (default is 20%)</p></li><li><p><code>dp_max_abs_well=convert_to_si(50, :bar)</code>: Maximum allowable pressure change for wells in SI units (Pa)</p></li><li><p><code>dp_max_rel_well=nothing</code>: Maximum allowable relative pressure change in well</p></li><li><p><code>ds_max=0.2</code>: Maximum change in saturations</p></li><li><p><code>dz_max=0.2</code>: Maximum change in composition (for compositional models only)</p></li><li><p><code>p_min=JutulDarcy.DEFAULT_MINIMUM_PRESSURE</code>: Minimum pressure in model (hard limit)</p></li><li><p><code>p_max=Inf</code>: Maximum pressure in model (hard limit)</p></li><li><p><code>dr_max=Inf</code>: Maximum change in Rs/Rv for blackoil models over a Newton iteration. Taken relative to the saturated value of the cell.</p></li><li><p><code>dT_max_rel=nothing</code>: Maximum relative change in temperature (JutulDarcy uses Kelvin, so comments about changing limits near zero above does not apply to typical reservoir temperatures)</p></li><li><p><code>dT_max_abs=50.0</code>: Maximum absolute change in temperature (in °K/°C)</p></li><li><p><code>fast_flash=false</code>: Shorthand to enable <code>flash_reuse_guess</code> and <code>flash_stability_bypass</code>. These options can together speed up the time spent in flash solver for compositional models. Options are based on &quot;Increasing the Computational Speed of Flash Calculations With Applications for Compositional, Transient Simulations&quot; by Rasmussen et al (2006).</p></li><li><p><code>flash_reuse_guess=fast_flash</code>: Reuse previous flash guess when a cell remains in two-phase.</p></li><li><p><code>flash_stability_bypass=fast_flash</code>: Bypass stability testing for cells outside the two-phase and shadow region.</p></li><li><p><code>can_shut_wells=true</code>: Configure facility to allow shutting wells that repeatedly get rates with the wrong side. Disabling this can make certain models infeasible to simulate, but it can be useful to do so for simple models where you know that the wells should be operational.</p></li></ul><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L192-L303" target="_blank" rel="noreferrer">source</a></p>`,14))]),s[68]||(s[68]=e("h3",{id:"Initial-state",tabindex:"-1"},[t("Initial state "),e("a",{class:"header-anchor",href:"#Initial-state","aria-label":'Permalink to "Initial state {#Initial-state}"'},"​")],-1)),s[69]||(s[69]=e("p",null,[t("The initial state can be set up by explicitly setting all primary variables. JutulDarcy also contains functionality for initial hydrostatic equilibriation of the state, but this is at the moment most easily set up using input files with the "),e("code",null,"EQUIL"),t(" keyword.")],-1)),e("details",H,[e("summary",null,[s[48]||(s[48]=e("a",{id:"JutulDarcy.setup_reservoir_state",href:"#JutulDarcy.setup_reservoir_state"},[e("span",{class:"jlbinding"},"JutulDarcy.setup_reservoir_state")],-1)),s[49]||(s[49]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[50]||(s[50]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_reservoir_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ex: For immiscible two-phase</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_reservoir_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, Pressure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Saturations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Convenience constructor that initializes a state for a <code>MultiModel</code> set up using <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_reservoir_model"><code>setup_reservoir_model</code></a>. The main convenience over <a href="/JutulDarcy.jl/previews/PR85/ref/jutul#Jutul.setup_state-Tuple{JutulModel, Vararg{Any}}"><code>setup_state</code></a> is only the reservoir initialization values need be provided: wells are automatically initialized from the connected reservoir cells.</p><p>As an alternative to passing keyword arguments, a <code>Dict{Symbol, Any}</code> instance can be sent in as a second, non-keyword argument.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L1085-L1097" target="_blank" rel="noreferrer">source</a></p>`,4))]),e("details",B,[e("summary",null,[s[51]||(s[51]=e("a",{id:"JutulDarcy.equilibriate_state",href:"#JutulDarcy.equilibriate_state"},[e("span",{class:"jlbinding"},"JutulDarcy.equilibriate_state")],-1)),s[52]||(s[52]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[53]||(s[53]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equilibriate_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, contacts)</span></span></code></pre></div><p>Equilibrates the state of the given model based on the provided contacts.</p><p><strong>Arguments</strong></p><ul><li><p><code>model</code>: The model whose state needs to be equilibrated.</p></li><li><p><code>contacts</code>: The nph contact depths.</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>datum_depth</code>: The reference depth for the datum.</p></li><li><p><code>datum_pressure</code>: The pressure at the datum depth.</p></li><li><p><code>cells</code>: The cells to be equilibrated.</p></li><li><p><code>rs</code>: Solution gas-oil ratio (blackoil).</p></li><li><p><code>rv</code>: Vapor-oil ratio (blackoil).</p></li><li><p><code>composition</code>: The composition vs depth (compositional).</p></li><li><p><code>kwarg</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li>The equilibrated state of the model.</li></ul><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/init/init.jl#L2-L22" target="_blank" rel="noreferrer">source</a></p>',9))]),s[70]||(s[70]=e("h2",{id:"simulation",tabindex:"-1"},[t("Simulation "),e("a",{class:"header-anchor",href:"#simulation","aria-label":'Permalink to "Simulation"'},"​")],-1)),s[71]||(s[71]=e("p",null,"Simulating is done by either setting up a reservoir simulator and then simulating, or by using the convenience function that automatically sets up a simulator for you.",-1)),s[72]||(s[72]=e("p",null,"There are a number of different options available to tweak the tolerances, timestepping and behavior of the simulation. It is advised to read through the documentation in detail before running very large simulations.",-1)),e("details",R,[e("summary",null,[s[54]||(s[54]=e("a",{id:"JutulDarcy.simulate_reservoir",href:"#JutulDarcy.simulate_reservoir"},[e("span",{class:"jlbinding"},"JutulDarcy.simulate_reservoir")],-1)),s[55]||(s[55]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[56]||(s[56]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simulate_reservoir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state0, model, dt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    restart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    forces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setup_forces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simulate_reservoir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(case;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Convenience function for simulating a reservoir model. This function internally calls <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_reservoir_simulator"><code>setup_reservoir_simulator</code></a>, simulates the problem and returns a <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.ReservoirSimResult"><code>ReservoirSimResult</code></a>. Keyword arguments are passed onto <a href="/JutulDarcy.jl/previews/PR85/man/highlevel#JutulDarcy.setup_reservoir_simulator"><code>setup_reservoir_simulator</code></a> and are documented in that function.</p><p>You can optionally unpack this result into the most typical desired outputs:</p><p><code>wellsols, states = simulate_reservoir(...)</code></p><p>where <code>wellsols</code> contains the well results and <code>states</code> the reservoir results (pressure, saturations and so on, in each cell of the reservoir domain).</p><p><strong>Examples</strong></p><p>You can restart/resume simulations by both providing the <code>output_path</code> argument and the <code>restart</code> argument:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Automatically restart from last solved step and returning the outputs if the simulation was already solved.</span></span>
<span class="line"><span>result = simulate_reservoir(state0, model, dt, output_path = &quot;/some/path&quot;, restart = true)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Restart from step 5</span></span>
<span class="line"><span>result = simulate_reservoir(state0, model, dt, output_path = &quot;/some/path&quot;, restart = 5)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Start from the beginning (default)</span></span>
<span class="line"><span>result = simulate_reservoir(state0, model, dt, output_path = &quot;/some/path&quot;, restart = false)</span></span></code></pre></div><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L834-L871" target="_blank" rel="noreferrer">source</a></p>`,9))]),e("details",S,[e("summary",null,[s[57]||(s[57]=e("a",{id:"JutulDarcy.setup_reservoir_simulator",href:"#JutulDarcy.setup_reservoir_simulator"},[e("span",{class:"jlbinding"},"JutulDarcy.setup_reservoir_simulator")],-1)),s[58]||(s[58]=t()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[59]||(s[59]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_reservoir_simulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models, initializer, parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>models</code>: either a single model or a Dict with the key :Reservoir for multimodels</p></li><li><p><code>initializer</code>: used to setup state0, must be compatible with <code>model</code></p></li><li><p><code>parameters</code>: initialized parameters, must be compatible with <code>model</code> if provided</p></li></ul><p><strong>Keyword arguments</strong></p><ul><li><p><code>split_wells</code>: Add facility model to each well (needed for domain decomposition and MPI solves)</p></li><li><p><code>assemble_wells_together</code>: Option to split wells into multiple sparse matrices (false argument experimental)</p></li><li><p><code>specialize=false</code>: use deep specialization of storage for faster execution, but significantly more compile time</p></li></ul><p>Additional keyword arguments are documented in the version of this function that uses <code>JutulCase</code> as the input.</p><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L535-L549" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup_reservoir_simulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JutulCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Keyword arguments</strong></p><ul><li><p><code>mode=:default</code>: Mode used for solving. Can be set to <code>:mpi</code> if running in MPI mode together with HYPRE, PartitionedArrays and MPI in your environment.</p></li><li><p><code>method=:newton</code>: Can be <code>:newton</code>, <code>:nldd</code> or <code>:aspen</code>. Newton is the most tested approach and <code>:nldd</code> can speed up difficult models. The <code>:nldd</code> option enables a host of additional options (look at the simulator config for more details).</p></li><li><p><code>presolve_wells=false</code>: Solve wells before each linearization. Can improve convergence for models with multisegment wells.</p></li></ul><p><strong>Linear solver options</strong></p><ul><li><p><code>linear_solver=:bicgstab</code>: iterative solver to use (provided model supports it). Typical options are <code>:bicgstab</code> or <code>:gmres</code> Can alternatively pass a linear solver instance.</p></li><li><p><code>precond=:cpr</code>: preconditioner for iterative solver. For larger problems, CPR variants are recommended. In order of strength and cost:</p><ul><li><p><code>:cpr</code> standard Constrained-Pressure-Residual with ILU(0) second stage (strong preconditioner)</p></li><li><p><code>:cprw</code> CPRW with ILU(0) second stage. Faster for problems with wells (strong preconditioner)</p></li><li><p><code>:ilu0</code> block-incomplete-LU (intermediate strength preconditioner)</p></li><li><p><code>:spai0</code>: Sparse Approximate Inverse of lowest order (weak preconditioner)</p></li><li><p><code>jacobi</code>: Jacobi preconditioner (weak preconditioner)</p></li></ul></li><li><p><code>rtol=nothing</code>: relative tolerance for linear solver. If set to <code>nothing</code>, the default tolerance for the preconditioner is used, which is 5e-3 for CPR variants and 1e-2 for smoothers.</p></li><li><p><code>linear_solver_arg</code>: <code>Dict</code> containing additional linear solver arguments.</p></li></ul><p><strong>Timestepping options</strong></p><ul><li><p><code>initial_dt=si_unit(:day)</code>: initial timestep in seconds (one day by default)</p></li><li><p><code>target_ds=Inf</code>: target saturation change over a timestep used by timestepper.</p></li><li><p><code>target_dz=Inf</code>: target mole fraction change over a timestep used by timestepper (compositional only).</p></li><li><p><code>target_its=8</code>: target number of nonlinear iterations per time step</p></li><li><p><code>offset_its=1</code>: dampening parameter for time step selector where larger values lead to more pessimistic estimates.</p></li><li><p><code>timesteps=:auto</code>: Set to <code>:auto</code> to use automatic timestepping, <code>:none</code> for no automatic timestepping (i.e. try to solve exact report steps)</p></li><li><p><code>max_timestep=si_unit(:year)</code>: Maximum internal timestep used in solver.</p></li></ul><p><strong>Convergence criterions</strong></p><ul><li><p><code>tol_cnv=1e-3</code>: maximum allowable point-wise error (volume-balance)</p></li><li><p><code>tol_mb=1e-7</code>: maximum alllowable integrated error (mass-balance)</p></li><li><p><code>tol_cnv_well=10*tol_cnv</code>: maximum allowable point-wise error for well node (volume-balance)</p></li><li><p><code>tol_mb_well=1e4*tol_mb</code>: maximum alllowable integrated error for well node (mass-balance)</p></li><li><p><code>inc_tol_dp_abs=Inf</code>: Maximum allowable pressure change (absolute)</p></li><li><p><code>inc_tol_dp_rel=Inf</code>: Maximum allowable pressure change (absolute)</p></li><li><p><code>inc_tol_dz=Inf</code>: Maximum allowable composition change (compositional only).</p></li></ul><p><strong>Inherited keyword arguments</strong></p><p>Additional keyword arguments come from the base Jutul simulation framework. We list a few of the most relevant entries here for convenience:</p><ul><li><p><code>info_level = 0</code>: Output level. Set to 0 for minimal output, -1 for no output and 1 or more for increasing verbosity.</p></li><li><p><code>output_path</code>: Path to write output to.</p></li><li><p><code>max_nonlinear_iterations=15</code>: Maximum Newton iterations before a time-step is cut.</p></li><li><p><code>min_nonlinear_iterations=1</code>: Minimum number of Newtons to perform before checking convergence.</p></li><li><p><code>relaxation=Jutul.NoRelaxation()</code>: Dampening used for solves. Can be set to <code>Jutul.SimpleRelaxation()</code> for difficult models. Equivialent option is to set <code>true</code> for relaxation and <code>false</code> for no relaxation.</p></li><li><p><code>failure_cuts_timestep=true</code>: Cut timestep instead of throwing an error when numerical issues are encountered (e.g. linear solver divergence).</p></li><li><p><code>max_timestep_cuts=25</code>: Maximum number of timestep cuts before a solver gives up. Note that when using dynamic timestepping, this in practice defines a minimal timestep, with more than the prescribed number of cuts being allowed if the timestep is dynamically increased after cutting.</p></li><li><p><code>timestep_max_increase=10.0</code>: Max allowable factor to increase time-step by. Overrides any choices made in dynamic step selection.</p></li><li><p><code>timestep_max_decrease=0.1</code>: Max allowable factor to decrease time-step by. Overrides any choices made in dynamic step selection.</p></li><li><p><code>tol_factor_final_iteration=1.0</code>: If set to a value larger than 1.0, the final convergence check before a time-step is cut is relaxed by multiplying all tolerances with this value. Warning: Setting it to a large value can have severe impact on numerical accuracy. A value of 1 to 10 is typically safe if your default tolerances are strict.</p></li></ul><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/utils.jl#L591-L678" target="_blank" rel="noreferrer">source</a></p>',20))]),e("details",P,[e("summary",null,[s[60]||(s[60]=e("a",{id:"JutulDarcy.ReservoirSimResult",href:"#JutulDarcy.ReservoirSimResult"},[e("span",{class:"jlbinding"},"JutulDarcy.ReservoirSimResult")],-1)),s[61]||(s[61]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[62]||(s[62]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReservoirSimResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Jutul.SimResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forces, extra </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a specific reservoir simulation results that contains well curves, reservoir states, and so on. This is the return type from <code>simulate_reservoir</code>.</p><p>A <code>ReservoirSimResult</code> can be unpacked into well solutions, reservoir states and reporting times:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res_result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ReservoirSimResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws, states, t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res_result</span></span></code></pre></div><p><strong>Fields</strong></p><ul><li><p><code>wells</code></p></li><li><p><code>states</code></p></li><li><p><code>time</code></p></li><li><p><code>result</code></p></li><li><p><code>extra</code></p></li></ul><p><a href="https://github.com/sintefmath/JutulDarcy.jl/blob/7122508ef72620409ee5022b41a7c3a35d78b836/src/types.jl#L585-L602" target="_blank" rel="noreferrer">source</a></p>`,7))])])}const K=r(d,[["render",I]]);export{N as __pageData,K as default};
